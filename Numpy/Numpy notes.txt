============================================================
------------------------------------------------------
Numpy Library
https://numpy.org/doc/stable/user/quickstart.html
#Some Examples is my own examples , the same as for notes.
#Will be updated on the future.
------------------------------------------------------
============================================================
Prerequisites
-Programming Languages : Python


===========================
===========================

===========================
===========================
----------------------
The Basics
----------------------
#Python Scientific Library used in calculations and some statistics functionality.
#Works with Arrays.
#Has tons of functions.
#To use it you must import it firstly as the following code line :
import numpy as np

Example:
[[1., 0., 0.],
 [0., 1., 2.]]

#NumPyâ€™s array class is called ndarray.

#ndarray.ndim
the number of axes (dimensions) of the array.

#ndarray.shape
the dimensions of the array. This is a tuple of integers
indicating the size of the array in each dimension.

#ndarray.size
the total number of elements of the array.

#ndarray.dtype
an object describing the type of the elements in the array.

#ndarray.data
the buffer containing the actual elements of the array.

===========================
===========================

===========================
===========================
----------------------
An example
----------------------
import numpy as np
a = np.arange(15).reshape(3, 5)
a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
a.shape
(3, 5)
a.ndim
2
a.dtype.name
'int64'
a.itemsize
8
a.size
15
type(a)
<class 'numpy.ndarray'>
b = np.array([6, 7, 8])
b
array([6, 7, 8])
type(b)
<class 'numpy.ndarray'>

#arrange(15) =>a function that generates from 0 to 15 numpy array.
===========================
===========================

===========================
===========================
----------------------
Array Creation
----------------------
import numpy as np
a = np.array([2, 3, 4])
a
array([2, 3, 4])
a.dtype
dtype('int64')
b = np.array([1.2, 3.5, 5.1])
b.dtype
dtype('float64')

---

a = np.array(1, 2, 3, 4)    # WRONG
Traceback (most recent call last):
  ...
TypeError: array() takes from 1 to 2 positional arguments but 4 were given
a = np.array([1, 2, 3, 4])  # RIGHT

---


c = np.array([[1, 2], [3, 4]], dtype=complex)
c
array([[1.+0.j, 2.+0.j],
       [3.+0.j, 4.+0.j]])

---

np.zeros((3, 4))
array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
np.ones((2, 3, 4), dtype=np.int16)
array([[[1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]],

       [[1, 1, 1, 1],
        [1, 1, 1, 1],
        [1, 1, 1, 1]]], dtype=int16)
np.empty((2, 3)) 
array([[3.73603959e-262, 6.02658058e-154, 6.55490914e-260],  # may vary
       [5.30498948e-313, 3.14673309e-307, 1.00000000e+000]])

#zeros(3,4) => generates a numpy 3*4 zeros array.
#empty(2,3) => generates a numpy 2*3 random very tiny numbers.

---

np.arange(10, 30, 5)
array([10, 15, 20, 25])
np.arange(0, 2, 0.3)  # it accepts float arguments
array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8])

#arrange(10,30,5) => generates a numpy array from 10 to 30 excluding 30 
and increament with 5.

---

from numpy import pi
np.linspace(0, 2, 9)                   # 9 numbers from 0 to 2
array([0.  , 0.25, 0.5 , 0.75, 1.  , 1.25, 1.5 , 1.75, 2.  ])
x = np.linspace(0, 2 * pi, 100)        # useful to evaluate function at lots of points
f = np.sin(x)

#importing pi math constant function.
#linspace(0, 2, 9) => a function generates from 0 to 2 numpy array with 9 equally spaced numbers.

---

===========================
===========================

===========================
===========================
----------------------
Printing Arrays
----------------------
a = np.arange(6)                    # 1d array
print(a)
[0 1 2 3 4 5]
>>>
b = np.arange(12).reshape(4, 3)     # 2d array
print(b)
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]
>>>
c = np.arange(24).reshape(2, 3, 4)  # 3d array
print(c)
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]

#using print() python function to print arrays.

print(np.arange(10000))
[   0    1    2 ... 9997 9998 9999]
>>>
print(np.arange(10000).reshape(100, 100))
[[   0    1    2 ...   97   98   99]
 [ 100  101  102 ...  197  198  199]
 [ 200  201  202 ...  297  298  299]
 ...
 [9700 9701 9702 ... 9797 9798 9799]
 [9800 9801 9802 ... 9897 9898 9899]
 [9900 9901 9902 ... 9997 9998 9999]]
===========================
===========================

===========================
===========================
----------------------
Basic Operations
----------------------
a = np.array([20, 30, 40, 50])
b = np.arange(4)
b
array([0, 1, 2, 3])
c = a - b
c
array([20, 29, 38, 47])
b**2
array([0, 1, 4, 9])
10 * np.sin(a)
array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])
a < 35
array([ True,  True, False, False])

---

A = np.array([[1, 1],
              [0, 1]])
B = np.array([[2, 0],
              [3, 4]])
A * B     # elementwise product
array([[2, 0],
       [0, 4]])
A @ B     # matrix product
array([[5, 4],
       [3, 4]])
A.dot(B)  # another matrix product
array([[5, 4],
       [3, 4]])

# operator * is elementwise , to operate on dot product use dot() function or A @ B

---

a = np.ones(3, dtype=np.int32)
b = np.linspace(0, pi, 3)
b.dtype.name
'float64'
c = a + b
c
array([1.        , 2.57079633, 4.14159265])
c.dtype.name
'float64'
d = np.exp(c * 1j)
d
array([ 0.54030231+0.84147098j, -0.84147098+0.54030231j,
       -0.54030231-0.84147098j])
d.dtype.name
'complex128'

When operating with arrays of different types, the type of the
resulting array corresponds to the
more general or precise one (a behavior known as upcasting).

---

a = rg.random((2, 3))
a
array([[0.82770259, 0.40919914, 0.54959369],
       [0.02755911, 0.75351311, 0.53814331]])
a.sum()
3.1057109529998157
a.min()
0.027559113243068367
a.max()
0.8277025938204418

#summary statistics functions : min(), sum() , max()

---

b = np.arange(12).reshape(3, 4)
b
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
>>>
b.sum(axis=0)     # sum of each column
array([12, 15, 18, 21])
>>>
b.min(axis=1)     # min of each row
array([0, 4, 8])
>>>
b.cumsum(axis=1)  # cumulative sum along each row
array([[ 0,  1,  3,  6],
       [ 4,  9, 15, 22],
       [ 8, 17, 27, 38]])

---

B = np.arange(3)
B
array([0, 1, 2])
np.exp(B)
array([1.        , 2.71828183, 7.3890561 ])
np.sqrt(B)
array([0.        , 1.        , 1.41421356])
C = np.array([2., -1., 4.])
np.add(B, C)
array([2., 0., 6.])

#exp()  => exponential math function.
#sqrt() => Square root math function.
#add()  => Add function (+)

---


===========================
===========================

===========================
===========================
----------------------
Indexing, Slicing and Iterating
----------------------

   Row              Column
a[from : to  ,  from : to ]

a = np.arange(10)**3
a
array([  0,   1,   8,  27,  64, 125, 216, 343, 512, 729])
a[2]
8
a[2:5]
array([ 8, 27, 64])
# equivalent to a[0:6:2] = 1000;
# from start to position 6, exclusive, set every 2nd element to 1000
a[:6:2] = 1000
a
array([1000,    1, 1000,   27, 1000,  125,  216,  343,  512,  729])
a[::-1]  # reversed a
array([ 729,  512,  343,  216,  125, 1000,   27, 1000,    1, 1000])
for i in a:
    print(i**(1 / 3.))

9.999999999999998  # may vary
1.0
9.999999999999998
3.0
9.999999999999998
4.999999999999999
5.999999999999999
6.999999999999999
7.999999999999999
8.999999999999998

---

b[-1]   # the last row. Equivalent to b[-1, :]
array([40, 41, 42, 43])

---

c = np.array([[[  0,  1,  2],  # a 3D array (two stacked 2D arrays)
               [ 10, 12, 13]],
              [[100, 101, 102],
               [110, 112, 113]]])
c.shape
(2, 2, 3)
c[1, ...]  # same as c[1, :, :] or c[1]
array([[100, 101, 102],
       [110, 112, 113]])
c[..., 2]  # same as c[:, :, 2]
array([[  2,  13],
       [102, 113]])

---

#printing every row using loops.

for row in b:
    print(row)

[0 1 2 3]
[10 11 12 13]
[20 21 22 23]
[30 31 32 33]
[40 41 42 43]

---

# wants to perform an operation on each element in the array, one can use the
flat attribute which is an iterator over all the elements of the array:

for element in b.flat:
    print(element)

0
1
2
3
10
11
12
13
20
21
22
23
30
31
32
33
40
41
42
43

---


===========================
===========================

===========================
===========================
----------------------
Shape Manipulation
----------------------
a = np.floor(10 * rg.random((3, 4)))
a
array([[3., 7., 3., 4.],
       [1., 4., 2., 2.],
       [7., 2., 4., 9.]])
a.shape
(3, 4)

---

a.ravel()  # returns the array, flattened
array([3., 7., 3., 4., 1., 4., 2., 2., 7., 2., 4., 9.])
a.reshape(6, 2)  # returns the array with a modified shape
array([[3., 7.],
       [3., 4.],
       [1., 4.],
       [2., 2.],
       [7., 2.],
       [4., 9.]])
a.T  # returns the array, transposed
array([[3., 1., 7.],
       [7., 4., 2.],
       [3., 2., 4.],
       [4., 2., 9.]])
a.T.shape
(4, 3)
a.shape
(3, 4)

---

a
array([[3., 7., 3., 4.],
       [1., 4., 2., 2.],
       [7., 2., 4., 9.]])
a.resize((2, 6))
a
array([[3., 7., 3., 4., 1., 4.],
       [2., 2., 7., 2., 4., 9.]])

---

a.reshape(3, -1)
array([[3., 7., 3., 4.],
       [1., 4., 2., 2.],
       [7., 2., 4., 9.]])

---

#in the two previous examples
-resize() , for modification in the original array as reference changing (reference type).
-reshape() , for printing without reference changing (value type).

===========================
===========================

===========================
===========================
----------------------
Stacking together different arrays
----------------------
#Stacking : combining arrays together whether in h [horizontal] , v [vertical].
a = np.floor(10 * rg.random((2, 2)))
a
array([[9., 7.],
       [5., 2.]])
b = np.floor(10 * rg.random((2, 2)))
b
array([[1., 9.],
       [5., 1.]])
np.vstack((a, b))
array([[9., 7.],
       [5., 2.],
       [1., 9.],
       [5., 1.]])
np.hstack((a, b))
array([[9., 7., 1., 9.],
       [5., 2., 5., 1.]])


===========================
===========================

===========================
===========================
----------------------
Copies and Views
----------------------
No Copy at All
---

a = np.array([[ 0,  1,  2,  3],
              [ 4,  5,  6,  7],
              [ 8,  9, 10, 11]])
b = a            # no new object is created
b is a           # a and b are two names for the same ndarray object
True

---
View or Shallow Copy
---
c = a.view()
c is a
False
c.base is a            # c is a view of the data owned by a
True
c.flags.owndata
False
>>>
c = c.reshape((2, 6))  # a's shape doesn't change
a.shape
(3, 4)
c[0, 4] = 1234         # a's data changes
a
array([[   0,    1,    2,    3],
       [1234,    5,    6,    7],
       [   8,    9,   10,   11]])

---
Deep Copy
---
d = a.copy()  # a new array object with new data is created
d is a
False
d.base is a  # d doesn't share anything with a
False
d[0, 0] = 9999
a
array([[   0,   10,   10,    3],
       [1234,   10,   10,    7],
       [   8,   10,   10,   11]])
---



==========================================
==========================================
-------------------------

-------------------------
==========================================
==========================================
100 Numpy function
---
np.array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)
np.arange([start,] stop[, step,], dtype=None)
np.zeros(shape, dtype=float, order='C')
np.ones(shape, dtype=None, order='C')
np.empty(shape, dtype=None, order='C')
np.full(shape, fill_value, dtype=None, order='C')
np.eye(N, M=None, k=0, dtype=float, order='C')
np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
np.random.rand(d0, d1, ..., dn)
np.random.randn(d0, d1, ..., dn)
np.random.randint(low, high=None, size=None, dtype='l')
np.random.choice(a, size=None, replace=True, p=None)
np.random.shuffle(x)
np.random.seed(seed=None)
np.mean(a, axis=None, dtype=None, out=None, keepdims=<no value>)
np.sum(a, axis=None, dtype=None, out=None, keepdims=<no value>)
np.min(a, axis=None, out=None, keepdims=<no value>, initial=<no value>)
np.max(a, axis=None, out=None, keepdims=<no value>, initial=<no value>)
np.median(a, axis=None, out=None, overwrite_input=False)
np.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
np.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<no value>)
np.prod(a, axis=None, dtype=None, out=None, keepdims=<no value>)
np.cumsum(a, axis=None, dtype=None, out=None)
np.cumprod(a, axis=None, dtype=None, out=None)
np.transpose(a, axes=None)
np.reshape(a, newshape, order='C')
np.concatenate((a1, a2, ...), axis=0, out=None)
np.vstack(tup)
np.hstack(tup)
np.split(ary, indices_or_sections, axis=0)
np.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)
np.sort(a, axis=-1, kind=None, order=None)
np.argsort(a, axis=-1, kind=None, order=None)
np.clip(a, a_min, a_max, out=None)
np.where(condition, x, y)
np.any(a, axis=None, out=None, keepdims=<no value>)
np.all(a, axis=None, out=None, keepdims=<no value>)
np.isnan(x, out=None, where=True, casting='same_kind', order='K', dtype=None)
np.isinf(x, out=None, where=True, casting='same_kind', order='K', dtype=None)
np.logical_and(x1, x2, out=None)
np.logical_or(x1, x2, out=None)
np.logical_not(x, out=None)
np.logical_xor(x1, x2, out=None)
np.exp(x, out=None, where=True)
np.log(x, out=None, where=True)
np.sin(x, out=None, where=True)
np.cos(x, out=None, where=True)
np.sqrt(x, out=None, where=True)
np.power(x1, x2, out=None, where=True)
np.dot(a, b, out=None)
np.matmul(a, b, out=None)
np.dot(a, b, out=None)
np.inner(a, b)
np.outer(a, b, out=None)
np.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)
np.linalg.inv(a)
np.linalg.det(a)
np.linalg.eig(a)
np.linalg.eigvals(a)
np.linalg.svd(a, full_matrices=True, compute_uv=True)
np.linalg.norm(x, ord=None, axis=None, keepdims=False)
np.linalg.solve(a, b)
np.linalg.lstsq(a, b, rcond='warn')
np.fft.fft(a, n=None, axis=-1, norm=None)
np.fft.ifft(a, n=None, axis=-1, norm=None)
np.fft.fft2(a, s=None, axes=(-2, -1), norm=None)
np.fft.ifft2(a, s=None, axes=(-2, -1), norm=None)
np.fft.fftn(a, s=None, axes=None, norm=None)
np.fft.ifftn(a, s=None, axes=None, norm=None)
np.fft.rfft(a, n=None, axis=-1, norm=None)
np.fft.irfft(a, n=None, axis=-1, norm=None)
np.fft.rfftn(a, s=None, axes=None, norm=None)
np.fft.irfftn(a, s=None, axes=None, norm=None)
np.histogram(a, bins=10, range=None, normed=None, weights=None, density=None)
np.histogram2d(x, y, bins=10, range=None, normed=None, weights=None, density=None)
np.histogramdd(sample, bins=10, range=None, normed=None, weights=None, density=None)
np.meshgrid(*xi, indexing='xy', sparse=False, copy=True)
np.gradient(f, *varargs, edge_order=1)
np.correlate(a, v, mode='valid')
np.corrcoef(x, y=None, rowvar=True, bias=<no value>, ddof=<no value>)
np.cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None)
np.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
np.polyval(p, x)
np.polyder(p, m=1)
np.polyint(p, m=1, k=None)
np.poly1d(c_or_r, r=False, variable=None)
np.roots(p)
np.polyadd(p1, p2)
np.polysub(p1, p2)
np.polymul(p1, p2)
np.polydiv(p1, p2)
np.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
np.polyval(p, x)
np.polyder(p, m=1)
np.polyint(p, m=1, k=None)
np.poly1d(c_or_r, r=False, variable=None)
np.roots(p)
np.polyadd(p1, p2)
np.polysub(p1, p2)
np.polymul(p1, p2)


