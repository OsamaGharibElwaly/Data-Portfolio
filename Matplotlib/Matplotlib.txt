===============================================
-------------------------------------------
Matplotlib.pyplot Library
For graphing and plotting
https://matplotlib.org/stable/tutorials/pyplot.html#sphx-glr-tutorials-pyplot-py
-------------------------------------------
===============================================
===============================================
Introduction to pyplot
-----------------------------------------------
#Collection of functions similar to MATLAB
#plots some lines in a plotting area, decorates the plot with labels, etc.
#To use this library you should import it.

import matplotlib.pyplot as plt

plt.plot([1, 2, 3, 4])
plt.ylabel('some numbers')
plt.show()

#plot([1, 2, 3, 4]) for plotting a graph with these points.
#ylabel('some numbers') writing a y axis label.
#show() the final step to plot the graph.
---
plt.plot([1, 2, 3, 4], [1, 4, 9, 16])
#the first list is x coordinates , the second one for y coordinates.
===============================================
===============================================
Formatting the style of your plot
-----------------------------------------------
plt.plot([1, 2, 3, 4], [1, 4, 9, 16], 'ro')
plt.show()

#'ro' for red circled points
---
import numpy as np

# evenly sampled time at 200ms intervals
t = np.arange(0., 5., 0.2)

# red dashes, blue squares and green triangles
plt.plot(t, t, 'r--', t, t**2, 'bs', t, t**3, 'g^')
plt.show()

#numpy array library for arrays and manipulation on it.
#'r--' red dashed , 'bs' blue solid dashed line , 'g^' green triangled line.
===============================================
===============================================
Plotting with categorical variables
-----------------------------------------------
names = ['group_a', 'group_b', 'group_c']
values = [1, 10, 100]

plt.figure(figsize=(9, 3))

plt.subplot(131)
plt.bar(names, values)
plt.subplot(132)
plt.scatter(names, values)
plt.subplot(133)
plt.plot(names, values)
plt.suptitle('Categorical Plotting')
plt.show()

#every first parameter in plotting figures types is x points
#every second parameter in plotting figures types is y points
#figure(figsize=(9, 3)) , 9x * 3y length units size
#subplot(131) >>131 == 1,3,1 >> 1 one row , 3 three columns , 1 the first plot
#scatter() >> points
#plot() lined graph figure
===============================================
===============================================
Controlling line properties
-----------------------------------------------
plt.plot(x, y, linewidth=2.0)
---
line, = plt.plot(x, y, '-')
line.set_antialiased(False) # turn off antialiasing
===============================================
===============================================
Working with multiple figures and axes
-----------------------------------------------
def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)

t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.figure()
plt.subplot(211)
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')

plt.subplot(212)
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()

#subplot(211) >> 2 two rows , 1 one column , 1 first figure.
---

import matplotlib.pyplot as plt
plt.figure(1)                # the first figure.
plt.subplot(211)             # the first subplot in the first figure.
plt.plot([1, 2, 3])
plt.subplot(212)             # the second subplot in the first figure.
plt.plot([4, 5, 6])


plt.figure(2)                # a second figure.
plt.plot([4, 5, 6])          # creates a subplot() by default.

plt.figure(1)                # first figure current.
                             # subplot(212) still current.
plt.subplot(211)             # make subplot(211) in the first figure
                             # current.
plt.title('Easy as 1, 2, 3') # subplot 211 title.
===============================================
===============================================
Working with text
-----------------------------------------------
mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)

# the histogram of the data
n, bins, patches = plt.hist(x, 50, density=True, facecolor='g', alpha=0.75)


plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.grid(True)
plt.show()

#xlabel('Smarts') >> x axis label text.
#ylabel('Probability') >> y axis label text.
#title('Histogram of IQ') >> the main title above the figure.
#plt.grid(True) >> lines x and y with low opacity is concerned.

---
t = plt.xlabel('my data', fontsize=14, color='red')

===============================================
===============================================
Logarithmic and other nonlinear axes
-----------------------------------------------
plt.xscale('log')
#logarithmic scale

---
# Fixing random state for reproducibility
np.random.seed(19680801)

# make up some data in the open interval (0, 1)
y = np.random.normal(loc=0.5, scale=0.4, size=1000)
y = y[(y > 0) & (y < 1)]
y.sort()
x = np.arange(len(y))

# plot with various axes scales
plt.figure()

# linear
plt.subplot(221)
plt.plot(x, y)
plt.yscale('linear')
plt.title('linear')
plt.grid(True)

# log
plt.subplot(222)
plt.plot(x, y)
plt.yscale('log')
plt.title('log')
plt.grid(True)

# symmetric log
plt.subplot(223)
plt.plot(x, y - y.mean())
plt.yscale('symlog', linthresh=0.01)
plt.title('symlog')
plt.grid(True)

# logit
plt.subplot(224)
plt.plot(x, y)
plt.yscale('logit')
plt.title('logit')
plt.grid(True)
# Adjust the subplot layout, because the logit one may take more space
# than usual, due to y-tick labels like "1 - 10^{-3}"
plt.subplots_adjust(top=0.92, bottom=0.08, left=0.10, right=0.95, hspace=0.25,
                    wspace=0.35)

plt.show()
===============================================
===============================================